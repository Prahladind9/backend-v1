DataStructures (DS) are collections of values, the relationships among them,
and the functions or operations that can be applied to the data

LinkedList (LL)
    A DS that contains a head, tail and length property
    LL consist of nodes, and each node has a value and a pointer
    to another node or null

    SinglyLinkedList (SLL)
        SLL are an excellent alternative to arrays when insertion and
        deletion at the beginning are frequently required.
        Arrays contain a built in index whereas LL do not.
        The idea of a "list DS" that consists of nodes is the foundation
        for other data structures like Stacks & Queues

    DoublyLinkedList (DLL)
        Almost identical to SLL, except every node has another pointer,
        to the previous node!
        Compared to SLL > More Memory === More Flexibility
            It's almost always a tradeoff!

Stack
    A LIFO data structure!
    The last element added to the stack will be the first element
    removed from the stack

Queue
    A FIFO data structure!

Trees
    Trees are non-linear data structures that contain a root & child nodes
    Terminology used
        Root    : The top node in a tree
        Child   : A node directly connected to another node
                   when moving away from the Root
        Parent  : The converse notion of a child
        Siblings: A group of nodes with the same parent
        Leaf    : A node with no children
        Edge    : The connection between one node and another

    Binary Trees
        Binary Trees can have values of any type, but at most
        two children for each parent

    Binary Search Trees
        Every parent node has at most two children
        Every node to the left of a parent node is always less than the parent
        Every node to the right of a parent node is always greater than the parent

    Tree Transversal
        Breadth-First Search > Lots of nodes to keep track of
        Depth-First Search   > Fewer nodes to keep track of
            > InOrder   > Used commonly with BST's > We get all nodes in their underlying order
            > PreOrder  > Can be used to "export" a tree structure so that it is easily reconstructed or copied
            > PostOrder > to transverse - bottom up all nodes in each row

    Binary Heap
        Very similar to a binary search tree, bit with some different rules!
        In a MaxBinaryHeap, parent nodes are always larger than child nodes.
        In a MinBinaryHeap, parent nodes are always smaller than child nodes.

        Binary Heaps are used to implement Priority Queues,
        which are very commonly used data structures

        SinkDown
            The Procedure for deleting the root from the heap
            (effectively extracting the maximum element in a max-heap
            or the minimum element in a min-heap) and restoring
            the properties os called down-heap/bubble-down/percolate-down/sift-down
            /trickle-down/heapify-down/cascade-down/extract-min,max.

    Priority Queue
        A data structure where each element has a priority.
        Elements with higher priorities are served before elements with lower priorities

    Hashtable
        Hash tables are used to store key-value pairs.
        They are like arrays, but the keys are not ordered.
        Unlike arrays, hash tables are fast for all of the following operations:
        finding values, adding new values, and removing values!

        Good Hash
            > Fast (constant time)
            > Doesn't cluster outputs at specific indices, but distributes uniformly
            > Deterministic (same input yields same output)

        Dealing with Collisions with Strategies
            1. Separate Chaining
                With separate chaining, at each index in our array we store values
                using a more sophisticate data structure (e.g. an array or a linked list)
                This allows us to store multiple key-value paris at the same index.
            2. Linear Probing
                With linear probing, when we find a collision, we search through
                the array to find the next empty slot
                Unlike with separate chaining, this allows us to store a single
                key-value at each index.