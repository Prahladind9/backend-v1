DataStructures (DS) are collections of values, the relationships among them,
and the functions or operations that can be applied to the data

LinkedList (LL)
    A DS that contains a head, tail and length property
    LL consist of nodes, and each node has a value and a pointer
    to another node or null

    SinglyLinkedList (SLL)
        SLL are an excellent alternative to arrays when insertion and
        deletion at the beginning are frequently required.
        Arrays contain a built in index whereas LL do not.
        The idea of a "list DS" that consists of nodes is the foundation
        for other data structures like Stacks & Queues

    DoublyLinkedList (DLL)
        Almost identical to SLL, except every node has another pointer,
        to the previous node!
        Compared to SLL > More Memory === More Flexibility
            It's almost always a tradeoff!

Stack
    A LIFO data structure!
    The last element added to the stack will be the first element
    removed from the stack

Queue
    A FIFO data structure!

Trees
    A DS consists of nodes in a parent/child relationship.
    Terminology used
        Root    : The top node in a tree
        Child   : A node directly connected to another node
                   when moving away from the Root
        Parent  : The converse notion of a child
        Siblings: A group of nodes with the same parent
        Leaf    : A node with no children
        Edge    : The connection between one node and another

    Binary Search Trees
        Every parent node has at most two children
        Every node to the left of a parent node is always less than the parent
        Every node to the right of a parent node is always greater than the parent
